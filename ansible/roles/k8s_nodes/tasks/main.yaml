---
- name: set ssh_key permission
  file:
    path: "{{ ansible_ssh_private_key_file }}"
    mode: '0600'
  delegate_to: localhost
- name: Wait for the nodes to be reachable
  wait_for_connection:
    connect_timeout: 10
    sleep: 5
    delay: 5
    timeout: 5000
  tags:
    - k8s_nodes

- name: Disable swap
  command: swapoff -a
  register: res
  retries: 10
  until: res is success
  any_errors_fatal: true
  tags:
    - k8s_nodes

- name: Remove swapfile from /etc/fstab
  replace:
    path: /etc/fstab
    regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
    replace: '# \1'
  tags:
    - k8s_nodes

- name: Pref IPv4 DNS Lookup
  template: src=./templates/gai.conf dest=/etc/gai.conf
  tags:
    - k8s_nodes

- name: Copy over the proxy configuration
  template: src=./templates/proxy.conf dest=/etc/apt/apt.conf.d/proxy.conf
  tags:
    - k8s_nodes
  when: http_proxy_status == true
    
#- name: populate /etc/environment 1
  #lineinfile:
    #dest: "/etc/environment"
    #state: present
    #line: HTTP_PROXY="http://{{ http_proxy }}"
  #when: http_proxy_status == "on"  
  #tags:
    #- k8s_nodes

#- name: populate /etc/environment 2
  #lineinfile:
    #dest: "/etc/environment"
    #state: present
    #line: HTTPS_PROXY="http://{{ http_proxy }}"
  #when: http_proxy_status == "on"  
  #tags:
    #- k8s_nodes

#- name: populate /etc/environment 3
  #lineinfile:
    #dest: "/etc/environment"
    #state: present
    #line: NO_PROXY=".{{ dns_domain }},localhost,172.30.0.1,.svc,.cluster.local,apiserver.kube-service-catalog.svc{% for host in groups ['k8s_nodes'] %},{{ hostvars[host]['real_ip'] }},{{ hostvars[host]['ipv6'] }},{{ host }}.{{ dns_domain }},{{ host }}{% endfor %},{{ pod_subnet }},{{ cluster_svc_subnet }},{{ external_svc_subnet }},{{ pod_subnet_v6 }},{{ cluster_svc_subnet_v6 }},::1,{{ control_plane_vip }}"
  #when: http_proxy_status == "on"
  #tags:
    #- k8s_nodes

- name: Test http internet connectivity get http://www.google.com
  uri:
    url: http://www.google.com
  environment: "{{ proxy_env }}"
  register: res
  retries: 10
  until: res is success
  any_errors_fatal: true
  tags:
    - k8s_nodes
   
- name: Test https internet connectivity get https://www.google.com
  uri:
    url: https://www.google.com
  environment: "{{ proxy_env }}"
  register: res
  retries: 10
  until: res is success
  any_errors_fatal: true
  tags:
    - k8s_nodes

- name: replace apt mirror on ubuntu
  template:
    src: ./templates/sources.list.j2
    dest: /etc/apt/sources.list
    backup: yes
  tags:
    - k8s_nodes
  when: ubuntu_apt_mirror


- name: add apt-key for Kubeadm
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
  environment: "{{ proxy_env }}"
  register: res
  retries: 10
  until: res is success
  any_errors_fatal: true
  tags:
    - k8s_nodes

- name: add kubernetes repo
  copy:
    content: "deb https://apt.kubernetes.io/ kubernetes-xenial main"
    dest: /etc/apt/sources.list.d/kubernetes.list
    force: yes
  environment: "{{ proxy_env }}"
  register: res
  retries: 10
  until: res is success
  any_errors_fatal: true
  tags:
    - k8s_nodes

- name: add apt-key for cri-o-runc
  apt_key:
    url: https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/{{ OS_Version }}/Release.key
  environment: "{{ proxy_env }}"
  register: res
  retries: 10
  until: res is success
  any_errors_fatal: true
  tags:
    - k8s_nodes

- name: add apt-key for cri-o
  apt_key:
    url: https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable:cri-o:/{{ crio_version }}/{{ OS_Version }}/Release.key
  environment: "{{ proxy_env }}"
  register: res
  retries: 10
  until: res is success
  any_errors_fatal: true

  tags:
    - k8s_nodes

- name: add cri-o-runc repo
  copy:
    content: "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/{{ OS_Version }}/  /"
    dest: /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
    force: no
  environment: "{{ proxy_env }}"
  tags:
    - k8s_nodes

- name: add cri-o repo
  copy:
    content: "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/{{ crio_version }}/{{ OS_Version }}/ /"
    dest: /etc/apt/sources.list.d/devel:kubic:libcontainers:stable:cri-o:{{ crio_version }}.list
    force: no
  environment: "{{ proxy_env }}"
  register: res
  retries: 10
  until: res is success
  any_errors_fatal: true
  tags:
    - k8s_nodes

- name: set timezone
  shell: timedatectl set-timezone {{ time_zone }}
  tags:
    - k8s_nodes

- name: apt update
  apt:
    update_cache: yes
    cache_valid_time: 0
  register: apt_res
  retries: 100
  until: apt_res is success
  tags:
    - k8s_nodes

# Certificates and NTP must start before as if the time is not in sycn apt update might fail
- name: Install the ca-certificates 
  apt: 
    name: ca-certificates
    state: latest
  tags:
    - k8s_nodes    

- name: Install the NTP daemon
  apt: name=ntp
  register: apt_res
  retries: 100
  until: apt_res is success
  tags:
    - k8s_nodes

- name: Copy over the NTP configuration
  template: src=./templates/ntp.conf dest=/etc/ntp.conf
  tags:
    - k8s_nodes

- name: restart ntpd
  service: name=ntp state=restarted
  tags:
    - k8s_nodes

- name: Make sure ntp is started, and is enabled on restart.
  service: name=ntp state=started enabled=yes
  tags:
    - k8s_nodes

- name: apt upgrade
  apt:
    upgrade: yes
  register: apt_res
  retries: 100
  until: apt_res is success
  any_errors_fatal: true
  tags:
    - k8s_nodes
    - apt_upgrade

- name: apt autoremove
  apt:
    autoremove: yes
  register: apt_res
  retries: 100
  until: apt_res is success
  tags:
    - k8s_nodes
    - apt_upgrade

- name: load the br_netfilter module
  modprobe:
    name: br_netfilter
    state: present
  tags:
    - k8s_nodes

- name: Ensure br_netfilter module is always loaded
  copy:
    dest: /etc/modules-load.d/k8s.conf
    content: "br_netfilter"
  tags:
    - k8s_nodes

- name: Set bridge-nf-call-ip6tables
  sysctl:
    name: net.bridge.bridge-nf-call-ip6tables
    value: "1"
    state: present
    sysctl_set: yes
    reload: yes
  tags:
    - k8s_nodes

- name: Set bridge-nf-call-ip4tables
  sysctl:
    name: net.bridge.bridge-nf-call-iptables
    value: "1"
    state: present
    sysctl_set: yes
    reload: yes
  tags:
    - k8s_nodes

- name: Set ipv4 ip_forward
  sysctl:
    name: net.ipv4.ip_forward
    value: "1"
    state: present
    sysctl_set: yes
    reload: yes
  tags:
    - k8s_nodes

- name: install cri-o
  apt:
    name: cri-o
    state: latest
  register: res
  retries: 10
  until: res is success
  any_errors_fatal: true
  tags:
    - k8s_nodes

- name: install cri-o-runc
  apt:
    name: cri-o-runc
    state: latest
  register: res
  retries: 10
  until: res is success
  any_errors_fatal: true
  tags:
    - k8s_nodes

- name: install cri-tools
  apt: 
    name: cri-tools
    state: latest
  register: res
  retries: 10
  until: res is success
  any_errors_fatal: true
  tags:
    - k8s_nodes

- name: Create cri-o network dir if it does not exist
  ansible.builtin.file:
    path: /etc/systemd/system/crio.service.d
    state: directory
    mode: '0755'
  tags:
    - k8s_nodes

- name: Copy over the proxy configuration
  template: src=./templates/crioproxy.conf dest=/etc/systemd/system/crio.service.d/http-proxy.conf
  tags:
    - k8s_nodes
  when: http_proxy_status


- name: Copy registries.conf to optionally enable registry mirror 
  template: 
    src=./templates/registries.conf
    dest=/etc/containers/registries.conf
  when: docker_mirror != "" 
  tags:
    - k8s_nodes

- name: Just force systemd to reread configs (2.4 and above)
  ansible.builtin.systemd:
    daemon_reload: yes
  when: http_proxy_status
  tags:
    - k8s_nodes

- name: Reload service crio, in all cases
  ansible.builtin.systemd:
    name: crio.service
    state: reloaded
  when: http_proxy_status
  any_errors_fatal: true
  tags:
    - k8s_nodes

#This is needed or CRI-O will pick up the default bridge plugin and start coredns in the wrong subnet. 
# Like this the nodes will be not-ready till Calico is configuerd and no issue!
- name: Delete default CNI plugins
  file:
    state: absent
    path: "/etc/cni/net.d/"

- name: enable cri-o
  service:
    name: crio
    enabled: yes
    daemon_reload: yes
  tags:
    - k8s_nodes

- name: start cri-o
  service:
    name: crio
    state: restarted
  any_errors_fatal: true
  tags:
    - k8s_nodes

- name: Install kubeadm, kubelet and kubectl 
  apt: 
    name: kubelet={{ kube_version }},kubectl={{ kube_version }},kubeadm={{ kube_version }}
    state: present
    force: True
  register: res
  retries: 10
  until: res is success
  any_errors_fatal: true
  tags:
    - k8s_nodes

- name: Create local-storage folder
  file:
    path: /mnt/local-storage
    state: directory
    mode: '0755'
    force: yes
  any_errors_fatal: true
  tags:
    - k8s_nodes

- name: Reboot the server
  shell: "sleep 5 && reboot"
  async: 1
  poll: 0
  tags:
    - k8s_nodes

- name: Pause for 1 minutes to ensure the hosts are off
  pause:
    minutes: 1

- name: Wait for the nodes to be reachable
  wait_for_connection:
    connect_timeout: 10
    sleep: 5
    delay: 5
    timeout: 5000
  tags:
    - k8s_nodes
