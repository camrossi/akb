---
- name: Include containers_versions variables 
  include_vars:
    file: ../../inventory/group_vars/containers_versions.yaml
  tags:
    - k8s_addons

- name: Copy common addons manifests
  template:
    src: "{{ item }}"
    dest: /tmp/{{ item }}
    force: yes
  with_items:
    - guestbook-all-in-one.yaml
    - k8s_dashboard_220.yaml
    - ingress.yaml
    - metric_server.yaml
    - goldpinger.yaml
    - local-storage.yaml
  register: label_res
  retries: 5
  until: label_res is success
  tags:
    - k8s_addons

- name: Copy neo4j addons manifests
  template:
    src: neo4j-values.yaml
    dest: /tmp/neo4j-values.yaml
    force: yes
  when: fabric_type is not defined or fabric_type == "aci"
  register: label_res
  retries: 5
  until: label_res is success
  tags:
    - k8s_addons

- name: Enable Scheduling on Masters if less than 3 workers are detected
  shell: kubectl taint nodes --all node-role.kubernetes.io/master-
  when: "groups['k8s_workers'] | length < 3"
  ignore_errors: yes
  tags:
    - k8s_addons

- name: Create guestbook ns
  shell: kubectl create ns gb
  ignore_errors: yes
  register: label_res
  retries: 5
  until: label_res is success
  tags:
    - k8s_addons

- name: Deply guestbook NS Deployment
  shell: kubectl -n gb apply -f /tmp/guestbook-all-in-one.yaml
  register: label_res
  retries: 5
  until: label_res is success
  tags:
    - k8s_addons

- name: Create guestbook ingress
  shell: kubectl apply -f /tmp/ingress.yaml
  register: label_res
  retries: 5
  until: label_res is success
  tags:
    - k8s_addons

- name: Create kubernetes-dashboard Deployment
  shell: kubectl apply -f /tmp/k8s_dashboard_220.yaml
  register: label_res
  retries: 5
  until: label_res is success
  tags:
    - k8s_addons

- name: Install Metric Server
  shell: kubectl apply -f /tmp/metric_server.yaml
  register: label_res
  retries: 5
  until: label_res is success
  tags:
    - k8s_addons

- name: Install Gold Pinger
  shell: kubectl apply -f /tmp/goldpinger.yaml
  register: label_res
  retries: 5
  until: label_res is success
  tags:
    - k8s_addons

- name: Labels Nodes with local-storage 
  shell: |
    kubectl label node --all local-storage=yes --overwrite
  register: label_res
  retries: 5
  until: label_res is success
  any_errors_fatal: true
  tags:
    - k8s_addons

- name: Labels Nodes with Natted IP
  shell: |
    kubectl label node {{ item }} external-ip={{ hostvars[item].ansible_host }} --overwrite
  loop: "{{groups['k8s_nodes']}}"
  register: label_res
  retries: 5
  until: label_res is success
  any_errors_fatal: true
  tags:
    - k8s_addons

- name: enabled local storage
  shell: kubectl apply -f /tmp/local-storage.yaml
  register: label_res
  retries: 5
  until: label_res is success
  tags:
    - k8s_addons

### NEO4J HELM INSTALL

- name: Add Neo4J helm Repo
  shell: helm repo add neo4j https://helm.neo4j.com/neo4j
  environment: "{{ proxy_env }}"
  register: label_res
  retries: 5
  until: label_res is success
  when:
    - not sandbox_status
    - fabric_type is not defined or fabric_type == "aci"
  tags:
    - k8s_addons

- name: helm repo update
  shell: helm repo update
  register: label_res
  retries: 5
  until: label_res is success
  when: 
    - not sandbox_status
    - fabric_type is not defined or fabric_type == "aci"
  environment: "{{ proxy_env }}"
  tags:
    - k8s_addons

- name: helm install Neo4J
  shell: helm install my-neo4j neo4j/neo4j-standalone -f /tmp/neo4j-values.yaml
  environment: "{{ proxy_env }}"
  register: label_res
  retries: 5
  until: label_res is success
  when: 
    - not sandbox_status
    - fabric_type is not defined or fabric_type == "aci"
  tags:
    - k8s_addons

- name: helm install Neo4J 
  shell: helm install my-neo4j neo4j-standalone-4.4.3.tgz  -f /tmp/neo4j-values.yaml
  register: label_res
  retries: 5
  until: label_res is success
  when:
    - sandbox_status
    - fabric_type is not defined or fabric_type == "aci"
  tags:
    - k8s_addons

- name: Force Schedule Neo4j on second master node
  shell: kubectl patch statefulset  my-neo4j -p '{"spec":{"template":{"spec":{"nodeName":"{{ groups['k8s_master_replicas'][0] }}"}}}}'
  when: fabric_type is not defined or fabric_type == "aci"
  tags:
    - k8s_addons

- name: Expose Neo4j
  shell: kubectl patch svc  my-neo4j-neo4j -p '{"spec":{"type":"NodePort","externalIPs":["{{ neo4j_ip }}"]}}'
  when: fabric_type is not defined or fabric_type == "aci"
  tags:
    - k8s_addons

- name: Wait for Neo4j to be Scheduled
  shell: kubectl wait --for=condition=PodScheduled pod -l app=my-neo4j
  register: label_res
  retries: 5
  until: label_res is success
  when: fabric_type is not defined or fabric_type == "aci"
  tags:
    - k8s_addons

- name: Get Neo4J Node info
  shell: kubectl get node `kubectl  get pod  -l app=my-neo4j -o=jsonpath="{.items[0].spec.nodeName}"` -o=jsonpath="{.metadata.labels.external-ip}"
  when: fabric_type is not defined or fabric_type == "aci"
  register: n4j_host
  tags:
    - k8s_addons

- name: Get Neo4J Port info
  shell:  kubectl  get svc my-neo4j-neo4j -o jsonpath='{.spec.ports[?(@.name=="tcp-bolt")].nodePort}'
  when: fabric_type is not defined or fabric_type == "aci"
  register: n4j_port
  tags:
    - k8s_addons

- name: Copy vkaci addons manifests
  template:
    src: vkaci.yaml.j2
    dest: /tmp/vkaci.yaml.j2
    force: yes
  when: fabric_type is not defined or fabric_type == "aci"
  tags:
    - k8s_addons

####
- name: Install vkaci
  shell: kubectl apply -f /tmp/vkaci.yaml.j2
  register: label_res
  retries: 5
  until: label_res is success
  when: fabric_type is not defined or fabric_type == "aci"
  tags:
    - k8s_addons

- name: add kubectl bash completion for root
  lineinfile:
    path: ~/.bashrc
    line: source <(kubectl completion bash)
    state: present
  tags:
    - k8s_addons

- name: add kubectl bash completion for user
  lineinfile:
    path: ~{{ ansible_ssh_user }}/.bashrc
    line: source <(kubectl completion bash)
    state: present
  tags:
    - k8s_addons
